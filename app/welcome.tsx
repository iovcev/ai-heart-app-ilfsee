
import React, { useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
  ScrollView,
} from 'react-native';
import { router } from 'expo-router';
import { SafeAreaView } from 'react-native-safe-area-context';
import { IconSymbol } from '@/components/IconSymbol';
import { colors } from '@/styles/commonStyles';
import { DEFAULT_AVATARS } from '@/types/chat';
import { useCompanionSettings } from '@/hooks/useCompanionSettings';

export default function WelcomeScreen() {
  const { settings, loading } = useCompanionSettings();

  useEffect(() => {
    // If user already has settings configured, skip welcome screen
    if (!loading && settings.name) {
      router.replace('/(tabs)/(home)/');
    }
  }, [settings, loading]);

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Loading...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.header}>
          <View style={styles.avatarRow}>
            {DEFAULT_AVATARS.slice(0, 3).map((avatar, index) => (
              <Image
                key={index}
                source={{ uri: avatar }}
                style={[styles.headerAvatar, { marginLeft: index > 0 ? -20 : 0 }]}
              />
            ))}
          </View>
          <Text style={styles.title}>AI Companion</Text>
          <Text style={styles.subtitle}>Your Emotional Connection Partner</Text>
        </View>

        <View style={styles.featuresContainer}>
          <View style={styles.featureCard}>
            <View style={styles.featureIcon}>
              <IconSymbol name="heart.fill" size={32} color={colors.primary} />
            </View>
            <Text style={styles.featureTitle}>Emotional Connection</Text>
            <Text style={styles.featureDescription}>
              Build meaningful connections through empathetic conversations
            </Text>
          </View>

          <View style={styles.featureCard}>
            <View style={styles.featureIcon}>
              <IconSymbol name="sparkles" size={32} color={colors.secondary} />
            </View>
            <Text style={styles.featureTitle}>Customizable Personality</Text>
            <Text style={styles.featureDescription}>
              Choose from sweet, witty, deep, or flirty personalities
            </Text>
          </View>

          <View style={styles.featureCard}>
            <View style={styles.featureIcon}>
              <IconSymbol name="bubble.left.and.bubble.right.fill" size={32} color={colors.accent} />
            </View>
            <Text style={styles.featureTitle}>Natural Conversations</Text>
            <Text style={styles.featureDescription}>
              Powered by advanced AI for engaging and contextual chats
            </Text>
          </View>
        </View>

        <TouchableOpacity
          style={styles.getStartedButton}
          onPress={() => router.replace('/(tabs)/settings')}
        >
          <Text style={styles.getStartedButtonText}>Get Started</Text>
          <IconSymbol name="arrow.right" size={20} color={colors.card} />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.skipButton}
          onPress={() => router.replace('/(tabs)/(home)/')}
        >
          <Text style={styles.skipButtonText}>Skip for now</Text>
        </TouchableOpacity>

        <View style={styles.disclaimerContainer}>
          <Text style={styles.disclaimerText}>
            ⚠️ This is a fictional AI companion, not a real person. All responses are generated by AI technology.
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 18,
    color: colors.textSecondary,
  },
  scrollContent: {
    flexGrow: 1,
    paddingHorizontal: 24,
    paddingTop: 40,
    paddingBottom: 40,
  },
  header: {
    alignItems: 'center',
    marginBottom: 40,
  },
  avatarRow: {
    flexDirection: 'row',
    marginBottom: 24,
  },
  headerAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    borderWidth: 3,
    borderColor: colors.card,
    backgroundColor: colors.accent,
  },
  title: {
    fontSize: 36,
    fontWeight: '800',
    color: colors.text,
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 18,
    color: colors.textSecondary,
    textAlign: 'center',
  },
  featuresContainer: {
    marginBottom: 32,
  },
  featureCard: {
    backgroundColor: colors.card,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    alignItems: 'center',
    boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)',
    elevation: 3,
  },
  featureIcon: {
    width: 64,
    height: 64,
    borderRadius: 32,
    backgroundColor: colors.background,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  featureTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.text,
    marginBottom: 8,
    textAlign: 'center',
  },
  featureDescription: {
    fontSize: 14,
    color: colors.textSecondary,
    textAlign: 'center',
    lineHeight: 20,
  },
  getStartedButton: {
    flexDirection: 'row',
    backgroundColor: colors.primary,
    paddingVertical: 18,
    paddingHorizontal: 32,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 12,
    boxShadow: '0px 4px 12px rgba(233, 30, 99, 0.3)',
    elevation: 4,
  },
  getStartedButtonText: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.card,
    marginRight: 8,
  },
  skipButton: {
    paddingVertical: 12,
    alignItems: 'center',
    marginBottom: 24,
  },
  skipButtonText: {
    fontSize: 16,
    color: colors.textSecondary,
    fontWeight: '500',
  },
  disclaimerContainer: {
    backgroundColor: colors.card,
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: colors.accent,
  },
  disclaimerText: {
    fontSize: 12,
    color: colors.textSecondary,
    textAlign: 'center',
    lineHeight: 18,
  },
});
